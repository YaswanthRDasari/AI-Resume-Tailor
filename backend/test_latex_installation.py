#!/usr/bin/env python3
"""
Test script to check LaTeX installation and PDF generation capability
"""

import subprocess
import tempfile
import os
import sys

def test_latex_installation():
    """Test if LaTeX is properly installed"""
    
    print("üîç Testing LaTeX Installation")
    print("=" * 50)
    
    # Test 1: Check if pdflatex is available
    print("\n1. Checking pdflatex availability...")
    try:
        result = subprocess.run(
            ["pdflatex", "--version"], 
            capture_output=True, 
            text=True, 
            timeout=10
        )
        if result.returncode == 0:
            print("‚úÖ pdflatex is available")
            print(f"   Version info: {result.stdout.split('(')[0].strip()}")
        else:
            print("‚ùå pdflatex returned error code")
            print(f"   Error: {result.stderr}")
    except FileNotFoundError:
        print("‚ùå pdflatex is not installed or not in PATH")
        print("   Please install a LaTeX distribution:")
        print("   - Windows: MiKTeX (https://miktex.org/)")
        print("   - macOS: MacTeX (https://www.tug.org/mactex/)")
        print("   - Linux: TeX Live (sudo apt-get install texlive-full)")
        return False
    except subprocess.TimeoutExpired:
        print("‚ùå pdflatex command timed out")
        return False
    except Exception as e:
        print(f"‚ùå Error checking pdflatex: {str(e)}")
        return False
    
    # Test 2: Try to compile a simple LaTeX document
    print("\n2. Testing PDF generation with simple LaTeX...")
    
    simple_latex = r"""
\documentclass{article}
\begin{document}
Hello World!
This is a test PDF generated by AI Resume Tailor.
\end{document}
"""
    
    try:
        with tempfile.TemporaryDirectory() as tmpdir:
            tex_path = os.path.join(tmpdir, "test.tex")
            pdf_path = os.path.join(tmpdir, "test.pdf")
            
            # Write test LaTeX file
            with open(tex_path, "w", encoding="utf-8") as f:
                f.write(simple_latex)
            
            # Compile to PDF
            result = subprocess.run([
                "pdflatex", 
                "-interaction=nonstopmode", 
                "-output-directory", tmpdir, 
                tex_path
            ], capture_output=True, text=True, timeout=30)
            
            print(f"   pdflatex return code: {result.returncode}")
            
            if result.returncode == 0 and os.path.exists(pdf_path):
                pdf_size = os.path.getsize(pdf_path)
                print(f"‚úÖ PDF generated successfully!")
                print(f"   PDF size: {pdf_size} bytes")
                
                # Verify PDF header
                with open(pdf_path, "rb") as f:
                    header = f.read(4)
                if header == b'%PDF':
                    print("‚úÖ PDF file is valid")
                    return True
                else:
                    print("‚ùå Generated file is not a valid PDF")
                    return False
            else:
                print("‚ùå PDF generation failed")
                print(f"   stdout: {result.stdout[:200]}...")
                print(f"   stderr: {result.stderr[:200]}...")
                return False
                
    except subprocess.TimeoutExpired:
        print("‚ùå PDF generation timed out")
        return False
    except Exception as e:
        print(f"‚ùå Error during PDF generation: {str(e)}")
        return False

def test_resume_latex():
    """Test with a more complex resume-like LaTeX document"""
    
    print("\n3. Testing with resume-style LaTeX...")
    
    resume_latex = r"""
\documentclass[11pt,a4paper]{article}
\usepackage[utf8]{inputenc}
\usepackage[margin=1in]{geometry}
\usepackage{enumitem}

\begin{document}

\section*{JOHN DOE}
Software Engineer

\section*{EXPERIENCE}
\textbf{Software Engineer at TechCorp} \hfill 2024-Present
\begin{itemize}[leftmargin=*]
\item Developed web applications using Python and Flask
\item Worked with MySQL database for data storage
\item Used Git for version control and collaboration
\end{itemize}

\section*{SKILLS}
Python, Flask, MySQL, Git, JavaScript, HTML, CSS

\section*{EDUCATION}
\textbf{Bachelor's in Computer Science} \hfill 2020-2024

\end{document}
"""
    
    try:
        with tempfile.TemporaryDirectory() as tmpdir:
            tex_path = os.path.join(tmpdir, "resume.tex")
            pdf_path = os.path.join(tmpdir, "resume.pdf")
            
            # Write resume LaTeX file
            with open(tex_path, "w", encoding="utf-8") as f:
                f.write(resume_latex)
            
            # Compile to PDF
            result = subprocess.run([
                "pdflatex", 
                "-interaction=nonstopmode", 
                "-output-directory", tmpdir, 
                tex_path
            ], capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0 and os.path.exists(pdf_path):
                pdf_size = os.path.getsize(pdf_path)
                print(f"‚úÖ Resume PDF generated successfully!")
                print(f"   PDF size: {pdf_size} bytes")
                return True
            else:
                print("‚ùå Resume PDF generation failed")
                print(f"   stderr: {result.stderr[:300]}...")
                return False
                
    except Exception as e:
        print(f"‚ùå Error during resume PDF generation: {str(e)}")
        return False

if __name__ == "__main__":
    print("üß™ LaTeX Installation Test")
    print("=" * 50)
    
    # Run tests
    basic_test = test_latex_installation()
    if basic_test:
        resume_test = test_resume_latex()
        if resume_test:
            print("\nüéâ All tests passed! LaTeX is working correctly.")
        else:
            print("\n‚ö†Ô∏è  Basic LaTeX works but resume generation failed.")
    else:
        print("\n‚ùå LaTeX installation test failed.")
        print("\nüìã Installation Instructions:")
        print("1. Download and install a LaTeX distribution:")
        print("   - Windows: MiKTeX (https://miktex.org/)")
        print("   - macOS: MacTeX (https://www.tug.org/mactex/)")
        print("   - Linux: sudo apt-get install texlive-full")
        print("2. Restart your terminal/command prompt")
        print("3. Run this test again")
    
    print("\n" + "=" * 50)
